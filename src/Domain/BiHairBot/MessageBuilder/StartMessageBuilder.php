<?php
namespace App\Domain\BiHairBot\MessageBuilder;

use App\Domain\BiHairBot\BiHairBotEvents;
use App\Domain\BiHairBot\BiHairBotProvider;
use App\Service\Telegram\ButtonDto;
use App\Service\Telegram\MessageBuilderInterface;
use App\Service\Telegram\MessageDto;

class StartMessageBuilder implements MessageBuilderInterface
{
    private const HELLO_MESSAGE_TEXT = 'ะัะธะฒะตั! ๐๐ป
ะะผะธ "ะััั" ะธ ัะบะพัะตะต ะฟะตัะตัะพะดะธ ัะผะพััะตัั ะผะพะน ะฑะตัะฟะปะฐัะฝัะน ะฟัะพะฑะฝัะน ััะพะบ ๐๐ปโโ๏ธ';

    /**
     * @param string $chantId
     *
     * @return MessageDto[]|\Generator
     */
    public function build(string $chantId): \Generator
    {
        yield new MessageDto(
            $chantId,
            self::HELLO_MESSAGE_TEXT,
            keyboardButtons: [
                new ButtonDto('๐โโ๏ธ ะััั'),
                new ButtonDto('๐ซ ะฃัะปัะณะธ'),
                new ButtonDto('๐ฑ ะะพะธ ัะพั. ัะตัะธ'),
                new ButtonDto('๐ฌ ะงะฐั ะดะปั ะผะฐััะตัะพะฒ'),
            ]);
    }

    /**
     * @param string $type
     * @param string $botName
     *
     * @return bool
     */
    public function supports(string $type, string $botName): bool
    {
        return $type === BiHairBotEvents::START && $botName === BiHairBotProvider::BOT_NAME;
    }
}
